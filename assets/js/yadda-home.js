// Generated by CoffeeScript 2.0.0-beta3

/**
 * @provides yadda-home
 * @requires yadda-default-code
 * @requires codemirror
 * @requires codemirror-coffeescript
 * @requires coffeescript
 * @requires lodash
 * @requires moment
 * @requires react
 * @requires react-dom
 */

(function() {
  var _codeKey, _codemirrorOpts, _init, _profileKey, _redraw, state;

  _codeKey = 'yaddaCode';

  _profileKey = 'prof';

  _redraw = function() {};

  state = {
    revisions: [],
    profileMap: {},
    set: function(name, value) {
      if (name) {
        state[name] = value;
      }
      return _redraw();
    }
  };

  _codemirrorOpts = {
    mode: 'coffeescript',
    lineNumbers: true,
    tabSize: 2,
    indentWithTabs: false,
    lineNumbers: true
  };

  _init = function() {
    var Root, _cached, _compile, _request, div, element, initEditor, k, node, pre, refresh;
    ({div, pre} = React.DOM);
    _request = function(path, data, callback) {
      var req;
      req = new JX.Request(path, callback);
      req.setResponseType('JSON');
      req.setExpectCSRFGuard(false);
      if (data) {
        req.setData(data);
      }
      return req.send();
    };
    _cached = {};
    _compile = function() {
      var bare, code, err, scope;
      if (_cached.code !== state.code) {
        try {
          bare = CoffeeScript.compile(state.code, {
            bare: true
          });
          scope = {};
          code = `(function() { ${bare} }).call(scope);`;
          eval(code);
          _cached.code = state.code;
          if (state.code !== yaddaDefaultCode) {
            localStorage[_codeKey] = state.code;
          }
        } catch (error) {
          err = error;
          if (__DEV__) {
            window.err = err;
          }
        }
        _cached.scope = scope;
      }
      return [_cached.scope || {}, err];
    };
    Root = class Root extends React.Component {
      render() {
        var content, err, errors, scope;
        content = null;
        errors = [];
        [scope, err] = _compile();
        if (err) {
          errors.push(err);
        }
        if (scope.render) {
          try {
            content = scope.render(state);
          } catch (error) {
            err = error;
            errors.push(err);
          }
        } else {
          errors.push(new Error('render(state) function needs to be defined'));
        }
        return div(null, errors.map(function(e, i) {
          return div({
            key: i,
            className: 'phui-info-view phui-info-severity-warning',
            title: e.stack
          }, e.toString());
        }), content);
      }

    };
    state.code = (localStorage[_codeKey] || yaddaDefaultCode).replace(/\t/g, '  ');
    element = React.createElement(Root);
    node = ReactDOM.render(element, document.querySelector('.yadda-root'));
    _redraw = function() {
      return node.forceUpdate();
    };
    refresh = function() {
      return _request('/api/differential.summary', null, function(r) {
        if (r.result) {
          state.revisions = r.result.revisions;
          state.profileMap = _.keyBy(r.result.profiles, function(p) {
            return p.userName;
          });
          return _redraw();
        }
      });
    };
    refresh();
    setInterval(refresh, 150000);
    initEditor = function(target) {
      var editor, editorOpts;
      target.style.left = '30px';
      target.style.bottom = '30px';
      target.style.width = '500px';
      target.style.height = `${window.innerHeight * 3 / 5}px`;
      editorOpts = _.extend({
        value: state.code
      }, _codemirrorOpts);
      editor = CodeMirror(target, editorOpts);
      editor.on('change', (editor) => {
        return state.set('code', editor.getValue().replace(/\t/g, '  '));
      });
      return initEditor = function() {};
    };
    if (JX.KeyboardShortcut) {
      k = new JX.KeyboardShortcut(['~'], 'Show live code editor');
      k.setHandler(function() {
        var target;
        target = document.querySelector('.yadda-editor');
        if (target.style.display === 'none') {
          target.style.display = '';
          return initEditor(target);
        } else {
          return target.style.display = 'none';
        }
      });
      k.register();
    }
    if (__DEV__) {
      window.state = state;
      return window._cached = _cached;
    }
  };

  document.addEventListener('DOMContentLoaded', _init);

}).call(this);
